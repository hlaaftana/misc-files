from java.lang {
  import System.out.println
  import Math.sqrt
}

primitive Month(days: int) = int { # lookup table for properties
  enum from 1 { # enum for constant values
    January(days: 31)
    February(days: 28)
    March(days: 31)
    April(days: 30)
    May(days: 31)
    June(days: 30)
    July(days: 31)
    August(days: 31)
    September(days: 30)
    October(days: 31)
    November(days: 30)
    December(days: 31)
  }
}

tuple Date(year, month, day: int) { # utilizes int[]
  toDays() => day + month * month.days + year * 365 + year div 4
}

`/`(*args: Date) inline => args # tuples and argument lists are interchangeable, infix can be chained

average[T: num](list: concept) {
  var sum, size: T = 0
  for x in list {
    T is type(x)
    sum += x
    inc size
  }
  sum / size
}

object Person(name: string, birthday: Date) {
  daysBornAfterChrist inline => birthday.toDays()
}

peopleStats(): void {
  let people: array[Person] = [
    ("Joe", 1782/February/14),
    Person("Dominic", 2016/7/31),
    Person(name: "Laura", birthday: 1973/April/6),
    Person(name: "Aleks", birthday: (1899, December, 25)),
    Person(name: "John", birthday: Date(1946, June, 30)),
    Person(name: "Trevor", birthday: (year: 2002, month: August, day: 19)),
    Person(name: "JÃ©sus", birthday: Date(year: 1011, month: March, day: 29))
  ]

  # or

  let otherTypeOfArrayInitialization: array[Person] = [
    "Joe", 1782/February/14;
    name: "Laura", birthday: 1973/April/6;
    (name: "Trevor"; birthday: 1899, December, 25)
  ]

  let days = people*.daysBornAfterChrist
  let mean = days.average

  var variance: float = 0 # double

  for i = 1, value in days {
    variance = (variance + (value - mean) ^ 2) / i
    inc i
  }

  println "Variance: %{variance}, standard deviation: %{sqrt(variance)}"
}

const romanSymbols: map[int, string] = [
  1: "I", 4: "IV", 5: "V", 9: "IX", 10: "X", 40: "XL",
  50: "L", 90: "XC", 100: "C", 400: "CD", 500: "D", 900: "CM", 1000: "M"
]

encodeRoman(var n: int): (result = "") {
  for k in const romanSymbols.keys.sort.reverse {
    while n > k {
      n -= k
      result << romanSymbols[k]
    }
  }
}

type Csv = seq[seq[string]]

parseCsv(str: string): Csv {
  str.lines*.split(',')
}

encodeCsv(csv: Csv) {
  csv*.join(',').join('\n')
}